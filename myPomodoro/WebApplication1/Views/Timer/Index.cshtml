@{
    ViewData["Title"] = "Timer";
}

<!-- Bootstrap CSS -->
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />

<!-- Optional: Font Awesome for star icons (for 5-star rating) -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

<div class="modal fade show d-block" tabindex="-1" role="dialog"
     style="background-color: rgba(0,0,0,0.8);" aria-modal="true">
    <div class="modal-dialog modal-fullscreen" role="document">
        <div class="modal-content text-center" style="background-color: #f7f7f7;">

            <!-- [1] Modal Header -->
            <div class="modal-header">
                <h1 class="modal-title w-100" style="font-size: 2rem;">Pomodoro-Style Timer</h1>
            </div> <!-- [1] end .modal-header -->
            <!-- [2] Modal Body -->
            <div class="modal-body" style="height: 75vh;">
                <!-- [3] Bootstrap Row for layout -->
                <div class="row w-100 h-100">

                    <!-- [4] Left/Center Column (col-md-8) -->
                    <div class="col-md-8 d-flex flex-column align-items-center justify-content-center">

                        <!-- Timer Display -->
                        <div id="timer-display" style="font-size: 5rem; margin-bottom: 1rem;">00:00</div>

                        <!-- NEW: Label to indicate current session type -->
                        <div id="session-label" style="font-size: 1.25rem; margin-bottom: 1rem;">
                            <!-- Will dynamically show "Work Session" or "Break Session" -->
                        </div>

                        <!-- Controls for session durations -->
                        <div class="mb-3">
                            <label for="workDuration" class="form-label">Work Session (minutes):</label>
                            <input type="number" id="workDuration" class="form-control"
                                   style="width:200px; margin: 0 auto;" value="30" />
                        </div>
                        <div class="mb-3">
                            <label for="restDuration" class="form-label">Rest Session (minutes):</label>
                            <input type="number" id="restDuration" class="form-control"
                                   style="width:200px; margin: 0 auto;" value="5" />
                        </div>

                        <!-- Buttons -->
                        <div class="d-flex flex-row gap-3">
                            <button id="start-btn" class="btn btn-success btn-lg">Start</button>
                            <button id="pause-btn" class="btn btn-warning btn-lg">Pause</button>
                            <button id="reset-btn" class="btn btn-danger btn-lg">Reset</button>
                            <button id="record-btn" class="btn btn-primary btn-lg">Record</button>
                        </div>

                        <!-- Completed 30-min sessions -->
                        <div class="mt-4">
                            <span style="font-size: 1.5rem;">30-min Sessions Completed:</span>
                            <span id="completed-sessions" style="font-size: 2rem;">0</span>
                        </div>

                    </div> <!-- [4] end col-md-8 -->
                    <!-- [5] Right Column (col-md-4) for Focus Metrics Card -->
                    <div class="col-md-4 d-flex align-items-center">
                        <div class="card w-100">
                            <div class="card-body">
                                <h5 class="card-title">Focus Metrics</h5>
                                <p>
                                    <strong>Today's Improvement:</strong>
                                    <span id="improvement-percentage" style="font-size: 1.25rem;">+0%</span>
                                </p>

                                <p>
                                    <strong>Focus Rating:</strong>
                                    <span id="self-intensity" style="font-size: 1.25rem;">N/A</span>
                                </p>

                                <!-- 5 Star Rating (clickable icons) -->
                                <div id="starRating" style="margin-bottom: 1rem;">
                                    <i class="fa-solid fa-star" data-value="1"></i>
                                    <i class="fa-solid fa-star" data-value="2"></i>
                                    <i class="fa-solid fa-star" data-value="3"></i>
                                    <i class="fa-solid fa-star" data-value="4"></i>
                                    <i class="fa-solid fa-star" data-value="5"></i>
                                </div>

                                <!-- A button to save the star rating for the next session -->
                                <button id="saveRatingBtn" class="btn btn-secondary btn-sm">Save Rating</button>

                            </div> <!-- end .card-body -->
                        </div> <!-- end .card -->
                    </div> <!-- [5] end col-md-4 -->

                </div> <!-- [3] end .row w-100 h-100 -->
            </div> <!-- [2] end .modal-body -->
            <!-- [6] Modal Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        onclick="window.location.href='/'">
                    Close
                </button>
            </div> <!-- [6] end .modal-footer -->

        </div> <!-- end .modal-content -->
    </div> <!-- end .modal-dialog -->
</div> <!-- end .modal.fade -->

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let timerInterval = null;
    let totalSeconds = 0;
    let isPaused = false;

    // We begin with a "Work" session
    let isWorkSession = true;
    let workDuration = 30;
    let restDuration = 5;

    // For tracking 30-min sessions completed
    let thirtyMinSessionCount = 0;

    // We store completed session logs in memory
    let sessionLogs = [];

    // Keep a "pendingFocusRating" for the star rating selected
    let pendingFocusRating = 0;

    // Grab references
    const sessionLabelEl = document.getElementById("session-label");

    document.getElementById("start-btn").addEventListener("click", startTimer);
    document.getElementById("pause-btn").addEventListener("click", pauseTimer);
    document.getElementById("reset-btn").addEventListener("click", resetTimer);
    document.getElementById("record-btn").addEventListener("click", () => recordSessions(false));
    document.getElementById("saveRatingBtn").addEventListener("click", saveFocusRating);

    // Star click events
    const stars = document.querySelectorAll("#starRating i");
    stars.forEach(star => {
        star.addEventListener("click", () => {
            const val = parseInt(star.getAttribute("data-value"));
            pendingFocusRating = val;
            updateStarDisplay(val);
        });
    });

    // On page load
    updateSessionLabel();        // Show "Work Session" or "Break Session"
    fetchVolumeIncrease();       // Get today's improvement at startup

    function startTimer() {
        // If paused, just resume
        if (isPaused) {
            isPaused = false;
            return;
        }

        // Otherwise, we're starting fresh
        workDuration = parseInt(document.getElementById("workDuration").value);
        restDuration = parseInt(document.getElementById("restDuration").value);

        // Clear any existing interval
        if (timerInterval) {
            clearInterval(timerInterval);
        }

        totalSeconds = (isWorkSession ? workDuration : restDuration) * 60;
        updateDisplay(totalSeconds);

        timerInterval = setInterval(() => {
            if (!isPaused) {
                totalSeconds--;
                updateDisplay(totalSeconds);

                if (totalSeconds <= 0) {
                    clearInterval(timerInterval);

                    // We finished this session
                    logSession(isWorkSession, (isWorkSession ? workDuration : restDuration), pendingFocusRating);

                    // If it was a 30-min work session, increment the completed counter
                    if (isWorkSession && workDuration === 30) {
                        thirtyMinSessionCount++;
                        document.getElementById("completed-sessions").innerText = thirtyMinSessionCount;
                    }

                    // If we just ended a work session => auto-start rest
                    // If we just ended a rest session => user must press Start again
                    if (isWorkSession) {
                        // 1) Attempt an auto-record to get real-time improvement
                        recordSessions(true);

                        // 2) Switch to rest
                        isWorkSession = false;
                        pendingFocusRating = 0;
                        updateStarDisplay(0);
                        updateSessionLabel();

                        // 3) Immediately start rest
                        startTimer();
                    } else {
                        // We ended a rest session => revert to work session, but do not auto-start
                        isWorkSession = true;
                        pendingFocusRating = 0;
                        updateStarDisplay(0);
                        updateSessionLabel();
                    }
                }
            }
        }, 1000);
    }

    function pauseTimer() {
        isPaused = true;
    }

    function resetTimer() {
        clearInterval(timerInterval);
        timerInterval = null;
        totalSeconds = 0;
        isPaused = false;
        isWorkSession = true; // reset to work
        updateDisplay(totalSeconds);
        pendingFocusRating = 0;
        updateStarDisplay(0);
        updateSessionLabel();
    }

    function updateDisplay(seconds) {
        let min = Math.floor(seconds / 60);
        let sec = seconds % 60;
        const minStr = (min < 10 ? "0" : "") + min;
        const secStr = (sec < 10 ? "0" : "") + sec;
        document.getElementById("timer-display").textContent = `${minStr}:${secStr}`;
    }

    function updateSessionLabel() {
        // Show "Work Session" or "Break Session" for clarity
        sessionLabelEl.textContent = isWorkSession ? "Work Session" : "Break Session";
    }

    function logSession(isWork, duration, focusRating) {
        const endTime = new Date();
        const msDuration = duration * 60000;
        const startTime = new Date(endTime - msDuration);

        sessionLogs.push({
            startTime: startTime.toISOString(),
            endTime: endTime.toISOString(),
            durationMinutes: duration,
            sessionType: isWork ? "Work" : "Rest",
            focusRating: focusRating
        });

        // If it's a work session and there's a rating, display it
        if (isWork && focusRating > 0) {
            document.getElementById("self-intensity").textContent = `${focusRating} / 5`;
        }
    }

    async function recordSessions(isAuto) {
        if (sessionLogs.length === 0) {
            if (!isAuto) alert("No sessions to record.");
            return;
        }

        try {
            const response = await fetch("/Timer/RecordSession", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(sessionLogs)
            });

            if (response.ok) {
                if (!isAuto) {
                    alert("Sessions recorded successfully. Email sent if configured.");
                }

                // Clear logs
                sessionLogs = [];

                // Now fetch the updated daily improvement in real-time
                await fetchVolumeIncrease();

            } else {
                const err = await response.text();
                if (!isAuto) {
                    alert("Error recording sessions: " + err);
                }
            }
        } catch (error) {
            if (!isAuto) {
                alert("Error sending request to server: " + error);
            }
        }
    }

    function saveFocusRating() {
        if (pendingFocusRating > 0) {
            document.getElementById("self-intensity").textContent = `${pendingFocusRating} / 5 (pending)`;
            alert("Focus rating saved for next Work session.");
        }
    }

    function updateStarDisplay(rating) {
        stars.forEach(star => {
            let val = parseInt(star.getAttribute("data-value"));
            star.style.color = (val <= rating) ? "gold" : "gray";
        });
    }

    // Fetch daily improvement from server & update UI
    async function fetchVolumeIncrease() {
        try {
            const resp = await fetch("/Timer/GetDailyImprovement");
            if (!resp.ok) return;
            const data = await resp.json();
            // data.improvementPercent => real-time difference (today vs last day worked)
            document.getElementById("improvement-percentage").textContent =
                `${data.improvementPercent.toFixed(1)}%`;
        } catch (err) {
            console.error("Failed to fetch daily improvement:", err);
        }
    }
</script>
