@{
    ViewData["Title"] = "Timer";
}

<!-- Use Bootstrap for the "nice" modal look -->
<link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
/>

<div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.8);" aria-modal="true">
    <div class="modal-dialog modal-fullscreen" role="document">
        <div class="modal-content text-center" style="background-color: #f7f7f7;">
            <div class="modal-header">
                <h1 class="modal-title w-100" style="font-size: 2rem;">Pomodoro-Style Timer</h1>
            </div>
            <div class="modal-body d-flex flex-column align-items-center justify-content-center" style="height: 75vh;">

                <!-- Timer Display -->
                <div id="timer-display" style="font-size: 5rem; margin-bottom: 1rem;">00:00</div>

                <!-- Controls for session durations -->
                <div class="mb-3">
                    <label for="workDuration" class="form-label">Work Session (minutes):</label>
                    <input type="number" id="workDuration" class="form-control" style="width:200px; margin: 0 auto;" value="30" />
                </div>
                <div class="mb-3">
                    <label for="restDuration" class="form-label">Rest Session (minutes):</label>
                    <input type="number" id="restDuration" class="form-control" style="width:200px; margin: 0 auto;" value="5" />
                </div>

                <!-- Buttons -->
                <div class="d-flex flex-row gap-3">
                    <button id="start-btn" class="btn btn-success btn-lg">Start</button>
                    <button id="pause-btn" class="btn btn-warning btn-lg">Pause</button>
                    <button id="reset-btn" class="btn btn-danger btn-lg">Reset</button>
                    <button id="record-btn" class="btn btn-primary btn-lg">Record</button>
                </div>

                <!-- Completed 30-min sessions -->
                <div class="mt-4">
                    <span style="font-size: 1.5rem;">30-min Sessions Completed:</span>
                    <span id="completed-sessions" style="font-size: 2rem;">0</span>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="window.location.href='/'">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let timerInterval = null;
    let totalSeconds = 0;
    let isPaused = false;

    let isWorkSession = true; // start with work session
    let workDuration = 30;    // default 30 minutes
    let restDuration = 5;     // default 5 minutes

    // To store completed session logs
    let sessionLogs = [];

    // For tracking 30-min sessions completed
    let thirtyMinSessionCount = 0;

    document.getElementById("start-btn").addEventListener("click", startTimer);
    document.getElementById("pause-btn").addEventListener("click", pauseTimer);
    document.getElementById("reset-btn").addEventListener("click", resetTimer);
    document.getElementById("record-btn").addEventListener("click", recordSessions);

    function startTimer() {
        // If paused, just resume
        if (isPaused) {
            isPaused = false;
            return;
        }

        // Otherwise, initialize a fresh session
        workDuration = parseInt(document.getElementById("workDuration").value);
        restDuration = parseInt(document.getElementById("restDuration").value);

        // If we're just starting or after a reset
        if (timerInterval) {
            clearInterval(timerInterval);
        }
        totalSeconds = (isWorkSession ? workDuration : restDuration) * 60;
        updateDisplay(totalSeconds);

        // Start counting down
        timerInterval = setInterval(() => {
            if (!isPaused) {
                totalSeconds--;
                updateDisplay(totalSeconds);

                // Timer completed
                if (totalSeconds <= 0) {
                    clearInterval(timerInterval);
                    
                    // Log the finished session
                    logSession(isWorkSession, (isWorkSession ? workDuration : restDuration));

                    // If it was a 30-min work session, increment the completed counter
                    if (isWorkSession && workDuration === 30) {
                        thirtyMinSessionCount++;
                        document.getElementById("completed-sessions").innerText = thirtyMinSessionCount;
                    }

                    // Switch session type (work <-> rest)
                    isWorkSession = !isWorkSession;

                    // Automatically start the next session
                    startTimer();
                }
            }
        }, 1000);
    }

    function pauseTimer() {
        isPaused = true;
    }

    function resetTimer() {
        clearInterval(timerInterval);
        timerInterval = null;
        totalSeconds = 0;
        isPaused = false;
        isWorkSession = true;
        updateDisplay(totalSeconds);
    }

    function updateDisplay(seconds) {
        let min = Math.floor(seconds / 60);
        let sec = seconds % 60;

        let minStr = min < 10 ? "0" + min : min;
        let secStr = sec < 10 ? "0" + sec : sec;

        document.getElementById("timer-display").textContent = `${minStr}:${secStr}`;
    }

    function logSession(isWork, duration) {
        // We store StartTime and EndTime for each session.
        // For simplicity, let’s approximate StartTime as "now - duration"
        const endTime = new Date();
        const msDuration = duration * 60000;
        const startTime = new Date(endTime - msDuration);

        sessionLogs.push({
            startTime: startTime.toISOString(),
            endTime: endTime.toISOString(),
            durationMinutes: duration,
            sessionType: isWork ? "Work" : "Rest"
        });
    }

    async function recordSessions() {
        // Post the sessionLogs to our backend to store in CSV and email
        if (sessionLogs.length === 0) {
            alert("No sessions to record.");
            return;
        }

        try {
            const response = await fetch("/Timer/RecordSession", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(sessionLogs)
            });

            if (response.ok) {
                alert("Sessions recorded successfully, and email sent if configured.");
                // Clear the session logs after a successful record
                sessionLogs = [];
            } else {
                const err = await response.text();
                alert("Error recording sessions: " + err);
            }
        } catch (error) {
            alert("Error sending request to server: " + error);
        }
    }
</script>
