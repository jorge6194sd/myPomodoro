@{
    ViewData["Title"] = "Timer";
}

<!-- Bootstrap CSS -->
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />

<!-- Optional: Font Awesome for star icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

<div class="modal fade show d-block" tabindex="-1" role="dialog"
     style="background-color: rgba(0,0,0,0.8);" aria-modal="true">
    <div class="modal-dialog modal-fullscreen" role="document">
        <div class="modal-content text-center" style="background-color: #f7f7f7;">

            <!-- [1] Modal Header -->
            <div class="modal-header">
                <h1 class="modal-title w-100" style="font-size: 2rem;">Pomodoro-Style Timer</h1>
            </div> <!-- [1] end .modal-header -->
            <!-- [2] Modal Body -->
            <div class="modal-body" style="height: 75vh;">
                <!-- [3] Bootstrap Row for layout -->
                <div class="row w-100 h-100">
                    <div class="col-md-8 d-flex flex-column align-items-center justify-content-center">
                        <!-- Timer Display -->
                        <div id="timer-display" style="font-size: 5rem; margin-bottom: 1rem;">00:00</div>
                        <!-- Session Label (Work / Break) -->
                        <div id="session-label" style="font-size: 1.25rem; margin-bottom: 1rem;"></div>

                        <!-- Controls for session durations -->
                        <div class="mb-3">
                            <label for="workDuration" class="form-label">Work Session (minutes):</label>
                            <input type="number" id="workDuration" class="form-control"
                                   style="width:200px; margin: 0 auto;" value="30" />
                        </div>
                        <div class="mb-3">
                            <label for="restDuration" class="form-label">Rest Session (minutes):</label>
                            <input type="number" id="restDuration" class="form-control"
                                   style="width:200px; margin: 0 auto;" value="5" />
                        </div>

                        <!-- NEW: Category Toggle (dropdown) -->
                        <div class="mb-3">
                            <label for="taskCategory" class="form-label">Select Task Category:</label>
                            <select id="taskCategory" class="form-select" style="width:200px; margin:0 auto;">
                                <option value="">-- Choose One --</option>
                                <option value="Job">Job</option>
                                <option value="Personal">Personal</option>
                            </select>
                        </div>

                        <!-- Buttons -->
                        <div class="d-flex flex-row gap-3">
                            <button id="start-btn" class="btn btn-success btn-lg" disabled>Start</button>
                            <button id="pause-btn" class="btn btn-warning btn-lg">Pause</button>
                            <button id="stop-and-record-btn" class="btn btn-info btn-lg">Stop &amp; Record</button>
                            <button id="reset-btn" class="btn btn-danger btn-lg">Reset</button>
                            <button id="record-btn" class="btn btn-primary btn-lg">Record</button>
                        </div>

                        <!-- Completed 30-min sessions -->
                        <div class="mt-4">
                            <span style="font-size: 1.5rem;">30-min Sessions Completed:</span>
                            <span id="completed-sessions" style="font-size: 2rem;">0</span>
                        </div>
                    </div>

                    <!-- Right Column for Focus Metrics Card -->
                    <div class="col-md-4 d-flex align-items-center">
                        <div class="card w-100">
                            <div class="card-body">
                                <h5 class="card-title">Focus Metrics</h5>
                                <p>
                                    <strong>Today's Improvement:</strong>
                                    <span id="improvement-percentage" style="font-size: 1.25rem;">+0%</span>
                                </p>
                                <p>
                                    <strong>Focus Rating:</strong>
                                    <span id="self-intensity" style="font-size: 1.25rem;">N/A</span>
                                </p>

                                <!-- 5 Star Rating (clickable icons) -->
                                <div id="starRating" style="margin-bottom: 1rem;">
                                    <i class="fa-solid fa-star" data-value="1"></i>
                                    <i class="fa-solid fa-star" data-value="2"></i>
                                    <i class="fa-solid fa-star" data-value="3"></i>
                                    <i class="fa-solid fa-star" data-value="4"></i>
                                    <i class="fa-solid fa-star" data-value="5"></i>
                                </div>
                                <button id="saveRatingBtn" class="btn btn-secondary btn-sm">Save Rating</button>
                            </div>
                        </div>
                    </div>
                </div> <!-- row w-100 -->
            </div> <!-- .modal-body -->
            <!-- Modal Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        onclick="window.location.href='/'">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // =========================
    //  GLOBAL STATE
    // =========================
    let timerInterval = null;
    let totalSeconds = 0;
    let isPaused = false;
    let isWorkSession = true;   // start in Work mode
    let workDuration = 30;
    let restDuration = 5;
    let thirtyMinSessionCount = 0;
    let sessionLogs = [];
    let pendingFocusRating = 0;
    let selectedCategory = "";

    // references
    const sessionLabelEl = document.getElementById("session-label");
    const taskCategoryEl = document.getElementById("taskCategory");
    const startBtn = document.getElementById("start-btn");
    const pauseBtn = document.getElementById("pause-btn");
    const stopRecordBtn = document.getElementById("stop-and-record-btn");
    const resetBtn = document.getElementById("reset-btn");
    const recordBtn = document.getElementById("record-btn");
    const saveRatingBtn = document.getElementById("saveRatingBtn");
    const stars = document.querySelectorAll("#starRating i");

    // on page load
    updateSessionLabel();
    fetchVolumeIncrease();
    checkCategorySelected();

    // =========================
    //  EVENT LISTENERS
    // =========================
    taskCategoryEl.addEventListener("change", () => {
        selectedCategory = taskCategoryEl.value;
        checkCategorySelected();
    });

    startBtn.addEventListener("click", startTimer);
    pauseBtn.addEventListener("click", pauseTimer);
    stopRecordBtn.addEventListener("click", stopAndRecord);
    resetBtn.addEventListener("click", resetTimer);
    recordBtn.addEventListener("click", () => recordSessions(false));
    saveRatingBtn.addEventListener("click", saveFocusRating);

    stars.forEach(star => {
        star.addEventListener("click", () => {
            const val = parseInt(star.getAttribute("data-value"));
            pendingFocusRating = val;
            updateStarDisplay(val);
        });
    });

    // =========================
    //  TIMER LOGIC
    // =========================
    function startTimer() {
        if (isPaused) {
            // if paused, resume
            isPaused = false;
            return;
        }

        workDuration = parseInt(document.getElementById("workDuration").value);
        restDuration = parseInt(document.getElementById("restDuration").value);

        if (timerInterval) {
            clearInterval(timerInterval);
        }

        totalSeconds = (isWorkSession ? workDuration : restDuration) * 60;
        updateDisplay(totalSeconds);

        timerInterval = setInterval(() => {
            if (!isPaused) {
                totalSeconds--;
                updateDisplay(totalSeconds);

                if (totalSeconds <= 0) {
                    clearInterval(timerInterval);

                    // session ended
                    logSession(isWorkSession, isWorkSession ? workDuration : restDuration, pendingFocusRating);

                    if (isWorkSession && workDuration === 30) {
                        thirtyMinSessionCount++;
                        document.getElementById("completed-sessions").innerText = thirtyMinSessionCount;
                    }

                    // if ended a work session => auto start rest
                    // if ended rest => user must press start
                    if (isWorkSession) {
                        recordSessions(true);
                        isWorkSession = false;
                        pendingFocusRating = 0;
                        updateStarDisplay(0);
                        updateSessionLabel();
                        // auto-start rest
                        startTimer();
                    } else {
                        // ended rest => back to work, but user must start
                        isWorkSession = true;
                        pendingFocusRating = 0;
                        updateStarDisplay(0);
                        updateSessionLabel();
                    }
                }
            }
        }, 1000);
    }

    function pauseTimer() {
        isPaused = true;
    }

    function stopAndRecord() {
        if (!isWorkSession || !timerInterval) {
            alert("Stop & Record only applies during a Work session in progress.");
            return;
        }

        clearInterval(timerInterval);
        timerInterval = null;

        // figure out how many minutes actually passed
        let fullWorkSeconds = workDuration * 60;
        let elapsedSeconds = fullWorkSeconds - totalSeconds;
        let elapsedMinutes = elapsedSeconds / 60;
        let actualDuration = Math.round(elapsedMinutes);

        logSession(true, actualDuration, pendingFocusRating);

        if (workDuration === 30) {
            thirtyMinSessionCount++;
            document.getElementById("completed-sessions").innerText = thirtyMinSessionCount;
        }

        recordSessions(true);

        totalSeconds = 0;
        updateDisplay(0);
        isPaused = false;
        isWorkSession = true;
        pendingFocusRating = 0;
        updateStarDisplay(0);
        updateSessionLabel();
    }

    function resetTimer() {
        clearInterval(timerInterval);
        timerInterval = null;
        totalSeconds = 0;
        isPaused = false;
        isWorkSession = true;
        updateDisplay(totalSeconds);
        pendingFocusRating = 0;
        updateStarDisplay(0);
        updateSessionLabel();
    }

    // =========================
    //  HELPER FUNCTIONS
    // =========================
    function updateDisplay(seconds) {
        // FIX: define this so the code doesn't error
        let min = Math.floor(seconds / 60);
        let sec = seconds % 60;
        let minStr = (min < 10 ? "0" : "") + min;
        let secStr = (sec < 10 ? "0" : "") + sec;
        document.getElementById("timer-display").textContent = `${minStr}:${secStr}`;
    }

    function updateSessionLabel() {
        // if we just switched to a work session, re-read category from select
        if (isWorkSession) {
            selectedCategory = taskCategoryEl.value;
        }
        sessionLabelEl.textContent = isWorkSession ? "Work Session" : "Break Session";
        checkCategorySelected();
    }

    function checkCategorySelected() {
        if (isWorkSession && !selectedCategory) {
            startBtn.disabled = true;
        } else {
            startBtn.disabled = false;
        }
    }

    function logSession(isWork, duration, focusRating) {
        const endTime = new Date();
        const msDuration = duration * 60000;
        const startTime = new Date(endTime - msDuration);

        let category = "";
        if (isWork) {
            category = selectedCategory;
        }

        sessionLogs.push({
            startTime: startTime.toISOString(),
            endTime: endTime.toISOString(),
            durationMinutes: duration,
            sessionType: isWork ? "Work" : "Rest",
            focusRating: focusRating,
            sessionCategory: category
        });

        // if it's work w/ rating
        if (isWork && focusRating > 0) {
            document.getElementById("self-intensity").textContent = `${focusRating} / 5`;
        }
    }

    async function recordSessions(isAuto) {
        if (sessionLogs.length === 0) {
            if (!isAuto) alert("No sessions to record.");
            return;
        }

        try {
            const response = await fetch("/Timer/RecordSession", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(sessionLogs)
            });

            if (response.ok) {
                if (!isAuto) {
                    alert("Sessions recorded successfully (Email sent if configured).");
                }
                sessionLogs = [];
                await fetchVolumeIncrease();
            } else {
                const err = await response.text();
                if (!isAuto) {
                    alert("Error recording sessions: " + err);
                }
            }
        } catch (error) {
            if (!isAuto) {
                alert("Error sending request: " + error);
            }
        }
    }

    function saveFocusRating() {
        if (pendingFocusRating > 0) {
            document.getElementById("self-intensity").textContent = `${pendingFocusRating} / 5 (pending)`;
            alert("Focus rating saved for the next Work session.");
        }
    }

    function updateStarDisplay(rating) {
        stars.forEach(star => {
            let val = parseInt(star.getAttribute("data-value"));
            star.style.color = (val <= rating) ? "gold" : "gray";
        });
    }

    async function fetchVolumeIncrease() {
        try {
            const resp = await fetch("/Timer/GetDailyImprovement");
            if (!resp.ok) return;
            const data = await resp.json();
            document.getElementById("improvement-percentage").textContent =
                `${data.improvementPercent.toFixed(1)}%`;
        } catch (err) {
            console.error("Failed to fetch daily improvement:", err);
        }
    }
</script>
